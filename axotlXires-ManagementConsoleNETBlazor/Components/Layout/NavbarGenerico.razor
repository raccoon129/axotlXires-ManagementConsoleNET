@inherits LayoutComponentBase
@using DAL.Modelos
@using DAL.Consumo
@using System.Text.Json
@using axotlXires_ManagementConsoleNETBlazor.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<header class="cabecera-navbar">
    <nav class="contenedor-navbar">
        <div class="contenido-navbar">
            <!-- Logo y nombre -->
            <div class="seccion-logo-navbar">
                <div class="marca-navbar">
                    <img src="/img/logoMorado2.png" alt="Logo Axotl Xires" class="logo-navbar" />
                    <span class="titulo-navbar">Axotl.org</span>
                    <div class="divisor-navbar"></div>
                    <div class="contenedor-subtitulo-navbar">
                        <span class="subtitulo-navbar">Axotl Xires</span>
                        <span class="subtitulo-pequeno-navbar">Management Console</span>
                    </div>
                </div>
            </div>

            <!-- Espacio para migas de pan -->
            <div class="migas-pan-navbar">
                <!-- Las migas de pan irán aquí -->
            </div>

            <!-- Menú derecho - condicionalmente visible -->
            @if (estaAutenticado)
            {
                <div class="menu-navbar">
                    <!-- Nuevo ícono de cuadrícula (grid) con contenedor para igualar tamaño al avatar -->
                    <div class="menu-grid-navbar">
                        <button @onclick="AlternarMenuGrid" class="boton-grid-navbar">
                            <div class="icono-grid-container">
                                <RadzenIcon Icon="apps" Style="font-size: 1.75rem;" />
                            </div>
                        </button>

                        <!-- Menú desplegable de apps (reposicionado) -->
                        @if (mostrarMenuGrid)
                        {
                            <div class="desplegable-grid-navbar">
                                <h4 class="titulo-desplegable">Ecosistema Xires</h4>
                                <div class="grid-iconos">
                                    <a href="https://axotl.org" target="_blank" class="icono-app">
                                        <img src="/img/IconCabezaAjoloteDark.png" alt="Axotl Xires" />
                                        <span>Axotl Xires</span>
                                    </a>
                                    <a href="https://team.management.axotl.org" target="_blank" class="icono-app">
                                        <img src="/img/IconAxotlXiresAzul.png" alt="Management Console" />
                                        <span>Management Console</span>
                                    </a>
                                    <a href="https://team.api.axotl.org" target="_blank" class="icono-app">
                                        <img src="/img/IconCabezaAjoloteWhite.png" alt="API" />
                                        <span>API</span>
                                    </a>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Menú de usuario -->
                    <div class="menu-usuario-navbar">
                        <button @onclick="AlternarMenuUsuario" class="boton-usuario-navbar">
                            @if (!string.IsNullOrEmpty(imagenPerfilBase64))
                            {
                                <!-- Mostrar la imagen de perfil cargada desde la API -->
                                <img src="@($"data:image/jpeg;base64,{imagenPerfilBase64}")"
                                     class="avatar-usuario-navbar"
                                     alt="Foto de perfil" />
                            }
                            else
                            {
                                <div class="avatar-usuario-navbar">
                                    <i class="fa fa-user"></i>
                                </div>
                            }
                            <span class="nombre-usuario-navbar">@nombreUsuario</span>
                        </button>

                        @if (mostrarMenuUsuario)
                        {
                            <div class="desplegable-usuario-navbar">
                                <a href="@($"/protected/usuarios/{usuarioId}")" class="item-desplegable-navbar">
                                    <i class="fa fa-user"></i>
                                    Mi Perfil
                                </a>
                                <button @onclick="CerrarSesion" class="item-desplegable-navbar cerrar-sesion-navbar">
                                    <i class="fa fa-sign-out-alt"></i>
                                    Cerrar Sesión
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </nav>
</header>

<style>
    .cabecera-navbar {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        z-index: 50;
    }

    .contenedor-navbar {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    .contenido-navbar {
        height: 4rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .seccion-logo-navbar {
        display: flex;
        align-items: center;
    }

    .marca-navbar {
        display: flex;
        align-items: center;
    }

    .logo-navbar {
        width: 40px;
        height: 40px;
        object-fit: contain;
    }

    .titulo-navbar {
        margin-left: 0.5rem;
        font-size: 1.5rem;
        font-weight: bold;
        color: #1f2937;
    }

    .divisor-navbar {
        height: 1.5rem;
        width: 1px;
        background-color: #e5e7eb;
        margin: 0 0.75rem;
    }

    .contenedor-subtitulo-navbar {
        display: flex;
        flex-direction: column;
        margin-left: 0.75rem;
    }

    .subtitulo-navbar {
        font-size: 1.125rem;
        font-weight: bold;
        color: #612c7d;
    }

    .subtitulo-pequeno-navbar {
        font-size: 0.75rem;
        color: #6b7280;
        margin-top: -0.25rem;
    }

    .migas-pan-navbar {
        flex: 1;
        margin: 0 2rem;
    }

    .menu-navbar {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    /* Estilos para el botón de grid y su contenedor */
    .menu-grid-navbar {
        position: relative;
    }

    .boton-grid-navbar {
        padding: 0.5rem;
        border-radius: 9999px;
        border: none;
        background: transparent;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .boton-grid-navbar:hover {
            background-color: #f3f4f6;
        }

    /* Contenedor circular para igualar tamaño con el avatar */
    .icono-grid-container {
        width: 1rem;
        height: 1rem;
        border-radius: 9999px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Estilos para el desplegable de grid */
    .desplegable-grid-navbar {
        position: absolute;
        right: 0;
        top: calc(100% + 0.5rem);
        width: 280px;
        background-color: white;
        border-radius: 0.5rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        border: 1px solid #e5e7eb;
        padding: 1rem;
        z-index: 10;
    }

    .titulo-desplegable {
        font-size: 1rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.75rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #e5e7eb;
    }

    .grid-iconos {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 0.75rem;
    }

    .icono-app {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 0.75rem;
        border-radius: 0.5rem;
        text-decoration: none;
        transition: background-color 0.2s;
    }

        .icono-app:hover {
            background-color: #f3f4f6;
        }

        .icono-app img {
            width: 40px;
            height: 40px;
            object-fit: contain;
            margin-bottom: 0.5rem;
        }

        .icono-app span {
            font-size: 0.75rem;
            color: #374151;
            text-align: center;
        }

    .menu-usuario-navbar {
        position: relative;
    }

    .boton-usuario-navbar {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem;
        border-radius: 0.5rem;
        border: none;
        background: transparent;
        cursor: pointer;
    }

        .boton-usuario-navbar:hover {
            background-color: #f3f4f6;
        }

    .avatar-usuario-navbar {
        width: 2rem;
        height: 2rem;
        border-radius: 9999px;
        background-color: #612c7d;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        object-fit: cover;
    }

    .nombre-usuario-navbar {
        font-size: 0.875rem;
        font-weight: 500;
        color: #374151;
    }

    .desplegable-usuario-navbar {
        position: absolute;
        right: 0;
        margin-top: 0.5rem;
        width: 12rem;
        background-color: white;
        border-radius: 0.5rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        border: 1px solid #e5e7eb;
        padding: 0.25rem 0;
        z-index: 10;
    }

    .item-desplegable-navbar {
        display: flex;
        align-items: center;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        color: #374151;
        text-decoration: none;
        width: 100%;
        text-align: left;
        background: none;
        border: none;
        cursor: pointer;
    }

        .item-desplegable-navbar:hover {
            background-color: #f3f4f6;
        }

        .item-desplegable-navbar i {
            margin-right: 0.5rem;
            font-size: 1rem;
        }

    .cerrar-sesion-navbar {
        color: #dc2626;
    }
</style>

@code {
    // El resto del código permanece igual
    private bool mostrarMenuUsuario = false;
    private bool mostrarMenuGrid = false;
    private bool estaAutenticado = false;
    private string nombreUsuario = string.Empty;
    private int usuarioId = 0;
    private string imagenPerfilBase64;

    /* URLs para las aplicaciones
    private string urlAxotlXires = "https://axotl-xires-url.com";
    private string urlManagementConsole = "https://management-console-url.com";
    private string urlApi = "https://api-docs-url.com";
    */
    // Instancia del servicio para consultar imágenes
    private readonly consultarImagenes _servicioImagenes = new consultarImagenes();

    protected override async Task OnInitializedAsync()
    {
        // Inicializar el servicio de autenticación
        await AuthService.InitializeAsync();
        await CargarDatosUsuario();
    }

    /// <summary>
    /// Carga los datos del usuario autenticado
    /// </summary>
    private async Task CargarDatosUsuario()
    {
        try
        {
            // Verificar si hay un token activo
            var token = await AuthService.ObtenerToken();
            if (!string.IsNullOrEmpty(token))
            {
                estaAutenticado = true;

                // Obtener datos del usuario desde localStorage
                var datosUsuarioJson = await AuthService.ObtenerDatosUsuario();
                if (!string.IsNullOrEmpty(datosUsuarioJson))
                {
                    // Deserializar los datos del usuario
                    var datosUsuario = JsonDocument.Parse(datosUsuarioJson);

                    // Extraer el nombre y el ID
                    nombreUsuario = datosUsuario.RootElement.GetProperty("nombre").GetString() ?? "Usuario";
                    usuarioId = datosUsuario.RootElement.TryGetProperty("id", out var idElement) ?
                                idElement.GetInt32() : 0;

                    // Cargar la imagen de perfil
                    await CargarImagenPerfil(token, usuarioId);
                }
                else
                {
                    nombreUsuario = "Usuario";
                }
            }
            else
            {
                estaAutenticado = false;
                nombreUsuario = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos de usuario: {ex.Message}");
            estaAutenticado = false;
            nombreUsuario = "Error";
        }
    }

    /// <summary>
    /// Carga la imagen de perfil del usuario actual
    /// </summary>
    private async Task CargarImagenPerfil(string token, int idUsuario)
    {
        if (idUsuario <= 0) return;

        try
        {
            // Obtener la imagen como array de bytes
            var imagenBytes = await _servicioImagenes.ObtenerImagenPerfilBytesAsync(token, idUsuario);

            if (imagenBytes != null && imagenBytes.Length > 0)
            {
                // Convertir a Base64 para mostrar en la imagen
                imagenPerfilBase64 = Convert.ToBase64String(imagenBytes);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar imagen de perfil: {ex.Message}");
        }
    }

    /// <summary>
    /// Alterna la visibilidad del menú grid de aplicaciones
    /// </summary>
    private void AlternarMenuGrid()
    {
        mostrarMenuGrid = !mostrarMenuGrid;

        // Cerrar el otro menú si está abierto
        if (mostrarMenuGrid && mostrarMenuUsuario)
        {
            mostrarMenuUsuario = false;
        }
    }

    private void AlternarMenuUsuario()
    {
        mostrarMenuUsuario = !mostrarMenuUsuario;

        // Cerrar el otro menú si está abierto
        if (mostrarMenuUsuario && mostrarMenuGrid)
        {
            mostrarMenuGrid = false;
        }
    }

    private async Task CerrarSesion()
    {
        try
        {
            // Cerrar la sesión usando el servicio de autenticación
            await AuthService.CerrarSesion();

            // Mostrar un mensaje antes de redirigir
            await JSRuntime.InvokeVoidAsync("alert", "Sesión cerrada correctamente");

            // Redirigir al login
            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cerrar sesión: {ex.Message}");
        }
    }

    /// <summary>
    /// Cierra los menús al hacer clic fuera de ellos
    /// </summary>
    private async Task CerrarMenusAlClickFuera()
    {
        // Agregar un script para manejar clics fuera de los menús
        await JSRuntime.InvokeVoidAsync("document.addEventListener", "click", DotNetObjectReference.Create(this));
    }
}